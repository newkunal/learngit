#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int aq =0;

struct token
{
    char tok[20];
    int type;
    int num;
    int line;

    struct token *next;

};

void display(struct token *first);
void refresh(struct token *first);
void preprocessor();
void open(struct token *first);
void type(struct token *first);
int CheckType(char s[20]);
int IsKeyword(char s[20]);
int IsNumber(char s[20]);
int IsOperator1(char s[20]);
int IsOperator2(char s[20]);
int IsOperator3(char s[20]);
int IsOperator4(char s[20]);
int IsChar(char s[20]);
int IsPunct(char s[20]);
int IsIdent(char s[20]);
void SyntaxCheck(struct token *first);
struct token* intcheck (struct token *current);
struct token *floatcheck (struct token *current);
struct token *boolcheck (struct token *current);
struct token *charcheck (struct token *current);
struct token *assigncheck (struct token *current);
struct token *voidcheck (struct token *current);
struct token *returncheck (struct token *current);
struct token *ifcheck (struct token *current);
struct token *elsecheck (struct token *current);
struct token *whilecheck (struct token *current);
void error(int line,char s[20],int errornumber);

int main()
{
    int menu=2;
    struct token *first,*head;
    head=(struct token *)malloc(sizeof(struct token));
    first = head;
    first->next= NULL;
    first->num = 0;

    preprocessor();
    open(first);
    type(first->next);
    display(first);
    SyntaxCheck(first);

	return 0;
}


void display(struct token *first)
{
    struct token *current;
    int numtemp;

    current=first;

    while(current->next != NULL)
        {
            numtemp = current->num + 1;
            current = current->next;
            current->num = numtemp;
        }


    current=first;

    while(current != NULL)
    {
        printf("%d    %s      %d\n",current->num,current->tok,current->type);
        current = current->next;

    }

    return;
}

void refresh(struct token *first)
{

    struct token *current;
    int numtemp;

    current=first;

    while(current->next != NULL)
        {
            numtemp = current->num + 1;
            current = current->next;
            current->num = numtemp;
        }

    return;
}

void preprocessor()
{
	int n,i,j;
	char str1[50];
	char str2[50];
	char str3[60];
	char *str4=(char *)malloc(1000);
	FILE *fp1,*fp2,*fp3,*fp4;
	printf("Please Enter The Nmae of Your File:\n");
	scanf("%s",str4);
	fp1=fopen(str4,"r+");
	fp2=fopen(str4,"r+");
	fp4=fopen("New.txt","w+");

	fgets(str1,10,fp2);

	if(strcmp(str1,"#include ")==0){
		fgets(str2,49,fp2);
		n=strlen(str2);
		if(str2[0]=='<' && str2[n-2]=='>'){
			j=0;
			for(i=1;i<=(n-3);i++){
				str3[j]=str2[i];
				j+=1;
			}
			if(2){
				fp3=fopen(str3,"r+");
				while(!feof(fp3)){
					char *s2=(char *)malloc(1000);
					fgets(s2,1000,fp3);
					fputs(s2,fp4);
					free(s2);
				}
			}
		}
		fclose(fp3);

	}
	fprintf(fp4,"\n");
	char *s3=(char *)malloc(1000);
	fgets(s3,1000,fp1);
	while(!feof(fp1)){
		char *s1=(char *)malloc(1000);
		fgets(s1,1000,fp1);
		fputs(s1,fp4);
		free(s1);
	}

	fclose(fp1);
	fclose(fp2);
	fclose(fp4);

	return;
}


void open(struct token *first)
{
    FILE *fop;
    fop = fopen("New.txt","r+");

    int flag=1,counter=0;

    while (!feof(fop))
    {

    struct token *current,*newtoken;
    newtoken = (struct token *)malloc(sizeof(struct token));
    newtoken->next= NULL;

    current=first;

    while(current->next != NULL)
    {
        current = current->next;
    }

    current->next = newtoken;

    fscanf(fop,"%s\n",&newtoken->tok);
    current->line = counter;
    counter++;
    }

    fclose(fop);
    return;
}


void type(struct token *first)
{


    struct token *current;
    current=first;


    while(current != NULL)
    {
		current->type = CheckType(current->tok);
        if (current->type == 7){
            printf("ERROR: %s undeclared!\n",current->tok);
        }
        current = current->next;
    }

    return;
}

int CheckType(char s[20]){

	if(IsKeyword(s)==1){
		return 1;
	}
	else if(IsNumber(s)==2){
		return 2;
	}
	else if(IsOperator1(s)==31){
		return 31;
	}
	else if(IsOperator2(s)==32){
		return 32;
	}
	else if(IsOperator3(s)==33){
		return 33;
	}
	else if(IsOperator4(s)==34){
		return 34;
	}
	else if(IsPunct(s)==4){
		return 4;
	}
	else if(IsChar(s)==5){
		return 5;
	}
	else if(IsIdent(s)==6){
		return 6;
	}
	else{
		return 7;
	}

}

int IsKeyword(char s[20]){
	int n;

	if(strncmp(s,"main",4)==0 && s[6]=='\0'){
		return 1;
	}
	else if(strncmp(s,"if",2)==0 && s[4]=='\0'){
		return 1;
	}
	else if(strncmp(s,"else",4)==0 && s[6]=='\0'){
		return 1;
	}
	else if(strncmp(s,"while",5)==0 && s[7]=='\0'){
		return 1;
	}
	else if(strncmp(s,"bool",4)==0 && s[6]=='\0'){
		return 1;
	}
	else if(strncmp(s,"false",5)==0 && s[7]=='\0'){
		return 1;
	}
	else if(strncmp(s,"true",4)==0 && s[6]=='\0'){
		return 1;
	}
	else if(strncmp(s,"int",3)==0 && s[5]=='\0'){
		return 1;
	}
	else if(strncmp(s,"float",5)==0 && s[7]=='\0'){
		return 1;
	}
	else if(strncmp(s,"char",4)==0 && s[6]=='\0'){
		return 1;
	}
	else if(strncmp(s,"void",4)==0 && s[6]=='\0'){
		return 1;
	}
	else if(strncmp(s,"null",4)==0 && s[6]=='\0'){
		return 1;
	}
	else if(strncmp(s,"return",6)==0){
		return 1;
	}
	else{
		return 0;
	}
}

int IsNumber(char s[20]){
	int i,j,k,a=1,b=1,n,flag=0;
	n=strlen(s);

	for(i=1;i<n-1;i++){
		if(s[i]=='.'){
			for(j=1;j<i-1;j++){
				if(isdigit(s[j])==0){
					a=2;
				}
			}
			for(k=i+1;k<n-1;k++){
				if(isdigit(s[k])==0){
					b=2;
				}
			}
			if(a==1 && b==1){
				return 2;
			}
		}
	}

	for(i=0;(i<n) && (flag==0);i++){
		if(isdigit(s[i])==0){
			flag=1;
		}
	}
	if (flag==0)
	{
		return 2;
	}
}

int IsOperator1(char s[20]){
	if(strcmp(s,"=")==0){
		return 31;
	}
}

int IsOperator2(char s[20]){
	if(strcmp(s,"+")==0 || strcmp(s,"-")==0 || strcmp(s,"*")==0 || strcmp(s,"/")==0){
		return 32;
	}

}

int IsOperator3(char s[20]){
	if(strcmp(s,"==")==0 || strcmp(s,"!=")==0 || strcmp(s,"<")==0 || strcmp(s,">")==0 || strcmp(s,"<=")==0 || strcmp(s,">=")==0){
		return 33;
	}
}

int IsOperator4(char s[20]){
	if(strcmp(s,"&&")==0 || strcmp(s,"||")==0){
		return 34;
	}
}


int IsPunct(char s[20]){

	if(s[0]=='(' || s[0]==')' || s[0]=='{' || s[0]=='}' || s[0]==';' || s[0]==','){
		if(s[1]=='\0'){
			return 4;
		}

	}
}

int IsChar(char s[20]){
	int n;
	n=strlen(s);

	if(s[0]=='\'' && s[2]=='\''){
		return 5;
	}
}

int IsIdent(char s[20]){
	int n,i;
	n=strlen(s);

	if(isupper(s[0])==0 && islower(s[0])==0){
		return 100;
	}

	for(i=1;i<=n;i++){
		if(ispunct(s[i])!=0){
			return 100;
		}
	}

	return 6;
}

void SyntaxCheck(struct token *first)
{

    struct token *current,*nexttoken,*temp;
    current=first->next;


    while(current->next != NULL)
    {
        if (strcmp(current->tok,"int")==0){
        	current = intcheck(current);
        }
        else if (strcmp(current->tok,"float")==0){
        	current = floatcheck(current);
        }
        else if(strcmp(current->tok,"bool")==0){
        	current = boolcheck(current);
        }
        else if(strcmp(current->tok,"char")==0){
        	current = charcheck(current);
        }
        else if(current->type==6){
        	current = assigncheck(current);
        }
        else if (strcmp(current->tok,"void")==0){
        	current = voidcheck(current);
        }
        else if (strcmp(current->tok,"return")==0){
        	current = returncheck(current);
        }
        else if(strcmp(current->tok,"if")==0){
        	current = ifcheck(current);
        }
        else if(strcmp(current->tok,"while")==0){
        	current = whilecheck(current);
        }
        else if (strcmp(current->tok,"}")==0){
        	temp = current->next;
        	if (strcmp(temp->tok,"else")==0){
        		current = elsecheck(temp);
        	}
        	aq--;
        }

        else if(strcmp(current->tok,"else")==0){
        	printf("Error in Line %d : ELSE without any IF\n",current->line);
        }
        else {
        	printf("Error in Line %d : unknown STATEMENT or PUNCTUATION\n",current->line);
        }


        current = current->next;
    }

    while (aq > 0)
    {
    	aq--;
    	error(current->line,current->tok,16);
    }
    while (aq < 0)
    {
    	aq++;
    	error(current->line,current->tok,17);
    }
    return;
}

struct token *intcheck (struct token *current)
{
	int ok=0;
	current=current->next;
	if(strcmp(current->tok,"main")==0){
		current=current->next;
		if(strcmp(current->tok,"(")==0){
			current=current->next;
			if(strcmp(current->tok,")")==0){
				current=current->next;
				if(strcmp(current->tok,"{")==0){
					aq++;
					ok=1;
				}
				else {
					error(current->line,current->tok,1);
					ok=2;
				}
			}
			else{
				error(current->line,current->tok,2);
				ok=2;
			}
		}
		else{
			error(current->line,current->tok,3);
			ok=2;
		}
	}
	else if(current->type==6){
		current=current->next;
		if(strcmp(current->tok,";")==0){
			ok=1;
		}
		else if(strcmp(current->tok,",")==0){
			current=current->next;
			if(current->type==6){
				current=current->next;
				if(strcmp(current->tok,";")==0){
					ok=1;
				}
				else{
					error(current->line,current->tok,4);
					ok=2;
				}
			}
			else{
				error(current->line,current->tok,5);
				ok=2;
			}
		}
		else if(strcmp(current->tok,"=")==0){
			current=current->next;
			if(current->type==6 || current->type==2){
				current=current->next;
				if(strcmp(current->tok,";")==0){
					ok=1;
				}
				else if(current->type==32){
					current=current->next;
					if(current->type==6 || current->type==2){
						current=current->next;
						if(strcmp(current->tok,";")==0){
							ok=1;
						}
						else{
							error(current->line,current->tok,4);
							ok=2;
						}
					}
					else{
						error(current->line,current->tok,6);
						ok=2;
					}
				}
				else{
					error(current->line,current->tok,7);
					ok=2;
				}
			}
			else{
				error(current->line,current->tok,6);
				ok=2;
			}
		}
		else{
			error(current->line,current->tok,8);
			ok=2;
		}
	}
	else{
		ok=2;
	}

	if (ok == 2)
	{while (strcmp(current->tok,";")!=0)
			current= current->next;
	}

	return current;

}

struct token *floatcheck (struct token *current)
{
	int ok=0;
	current=current->next;
	if(current->type==6){
		current=current->next;
		if(strcmp(current->tok,";")==0){
			ok=1;

		}
		else if(strcmp(current->tok,",")==0){
			current=current->next;
			if(current->type==6){
				current=current->next;
				if(strcmp(current->tok,";")==0){
					ok=1;

				}
				else{
					error(current->line,current->tok,4);
					ok=2;
				}
			}
			else{
				error(current->line,current->tok,5);
				ok=2;
			}
		}
		else if(strcmp(current->tok,"=")==0){
			current=current->next;
			if(current->type==6 || current->type==2){
				current=current->next;
				if(strcmp(current->tok,";")==0){
					ok=1;

				}
				else if(current->type==32){
					current=current->next;
					if(current->type==6 || current->type==2){
						current=current->next;
						if(strcmp(current->tok,";")==0){
							ok=1;

						}
						else{
							error(current->line,current->tok,4);
							ok=2;
						}
					}
					else{
						error(current->line,current->tok,6);
						ok=2;
					}
				}
				else{
					error(current->line,current->tok,7);
					ok=2;
				}
			}
			else{
				error(current->line,current->tok,6);
				ok=2;
			}
		}
		else{
			error(current->line,current->tok,8);
			ok=2;
		}
	}
	else{
		ok=2;
	}

	if (ok == 2)
	{while (strcmp(current->tok,";")!=0)
			current= current->next;
	}

	return current;

}

struct token *boolcheck (struct token *current)
{
	int ok=0;
	current=current->next;
	if(current->type==6){
		current=current->next;
		if(strcmp(current->tok,";")==0){
			ok=1;

		}
		else if(strcmp(current->tok,",")==0){
			current=current->next;
			if(current->type==6){
				current=current->next;
				if(strcmp(current->tok,";")==0){
					ok=1;

				}
				else{
					error(current->line,current->tok,4);
					ok=2;
				}
			}
			else{
				error(current->line,current->tok,5);
				ok=2;
			}
		}
		else if(strcmp(current->tok,"=")==0){
			current=current->next;
			if(current->type==6 || strcmp(current->tok,"true")==0 || strcmp(current->tok,"false")==0){
				current=current->next;
				if(strcmp(current->tok,";")==0){
					ok=1;
				}
				else{
					error(current->line,current->tok,4);
					ok=2;
				}
			}
			else{
				error(current->line,current->tok,9);
				ok=2;
			}
		}
		else{
			error(current->line,current->tok,8);
			ok=2;
		}
	}
	else{
		ok=2;
	}

	if (ok == 2){
	while (strcmp(current->tok,";")!=0)
			current= current->next;
	}

	return current;
}


struct token *charcheck (struct token *current)
{
	int ok=0;
	current=current->next;
	if(current->type==6){
		current=current->next;
		if(strcmp(current->tok,";")==0){
			ok=1;
		}
		else if(strcmp(current->tok,",")==0){
			current=current->next;
			if(current->type==6){
				current=current->next;
				if(strcmp(current->tok,";")==0){
					ok=1;
				}
				else{
					error(current->line,current->tok,4);
					ok=2;
				}
			}
			else{
				error(current->line,current->tok,5);
				ok=2;
			}
		}
		else if(strcmp(current->tok,"=")==0){
			current=current->next;
			if(current->type==6 || current->type==5){
				current=current->next;
				if(strcmp(current->tok,";")==0){
					ok=1;
				}
				else{
					error(current->line,current->tok,4);
					ok=2;
				}
			}
			else{
				error(current->line,current->tok,10);
				ok=2;
			}
		}
		else{
			error(current->line,current->tok,8);
			ok=2;
		}
	}
	else{
		ok=2;
	}

	if (ok == 2){
	while (strcmp(current->tok,";")!=0)
			current= current->next;
	}

	return current;
}


struct token *assigncheck (struct token *current)
{
	int ok=0;
	current=current->next;
		if(strcmp(current->tok,"=")==0){
			current=current->next;
			if(current->type==6 || current->type==2 || current->type==5){
				current=current->next;
				if(strcmp(current->tok,";")==0){
					ok=1;
				}
				else if(current->type==32){
					current=current->next;
					if(current->type==6 || current->type==2){
						current=current->next;
						if(strcmp(current->tok,";")==0){
							ok=1;
						}
						else{
							error(current->line,current->tok,4);
							ok=2;
						}
					}
					else{
						error(current->line,current->tok,6);
						ok=2;
					}
				}
				else{
					error(current->line,current->tok,7);
					ok=2;
				}
			}
			else{
				error(current->line,current->tok,12);
				ok=2;
			}
		}
		else{
			error(current->line,current->tok,11);
			ok=2;
		}


	if (ok == 2){
	while (strcmp(current->tok,";")!=0)
			current= current->next;
	}

	return current;
}

struct token *voidcheck (struct token *current)
{
	int ok=0;
	current=current->next;
	if(strcmp(current->tok,"main")==0){
		current=current->next;
		if(strcmp(current->tok,"(")==0){
			current=current->next;
			if(strcmp(current->tok,")")==0){
				current=current->next;
				if(strcmp(current->tok,"{")==0){
					aq++;
					ok=1;
				}
				else {
					error(current->line,current->tok,1);
					ok=2;
				}
			}
			else{
				error(current->line,current->tok,2);
				ok=2;
			}
		}
		else{
			error(current->line,current->tok,3);
			ok=2;
		}
	}
	else{
		ok=2;
	}

	if (ok == 2){
	while (strcmp(current->tok,";")!=0)
			current= current->next;
	}

	return current;

}

struct token *returncheck (struct token *current)
{
	int ok=0;
	current=current->next;
		if(current->type==6 || current->type==2 || current->type==5){
			current=current->next;
			if(strcmp(current->tok,";")==0){
				ok=1;
			}
			else{
				error(current->line,current->tok,4);
				ok=2;
			}
		}
		if(strcmp(current->tok,";")==0){
			ok=1;

		}
		else{
			error(current->line,current->tok,12);
			ok=2;
		}


	if (ok == 2){
		while (strcmp(current->tok,";")!=0)
			current= current->next;
	}

	return current;
}

struct token *ifcheck (struct token *current){
	int ok=0;
	current=current->next;
	if(strcmp(current->tok,"(")==0){
		current=current->next;
		if(current->type==2){
			current=current->next;
			if(strcmp(current->tok,")")==0){
				current=current->next;
				if(strcmp(current->tok,"{")==0){
					ok=1;
					aq++;
				}
				else{
					error(current->line,current->tok,1);
					ok=2;
				}
			}
			else{
				error(current->line,current->tok,2);
				ok=2;
			}

		}
		else if(current->type==6){
			current=current->next;
			if(strcmp(current->tok,")")==0){
				current=current->next;
				if(strcmp(current->tok,"{")==0){
					aq++;
					ok=1;
				}
				else{
					error(current->line,current->tok,1);
					ok=2;
				}
			}
			else if(current->type==33){
				current=current->next;
				if(current->type==6 || current->type==2 || current->type==5 ){
					current=current->next;
					if(strcmp(current->tok,")")==0){
						current=current->next;
						if(strcmp(current->tok,"{")==0){
							aq++;
							ok=1;
						}
						else{
							error(current->line,current->tok,1);
							ok=2;
						}
					}
					else{
						error(current->line,current->tok,2);
						ok=2;
					}
				}
				else{
					error(current->line,current->tok,12);
					ok=2;
				}
			}
			else if(current->type==34){
				current=current->next;
				if(current->type==6){
					current=current->next;
					if(strcmp(current->tok,")")==0){
						current=current->next;
						if(strcmp(current->tok,"{")==0){
							aq++;
							ok=1;
						}
						else{
							error(current->line,current->tok,1);
							ok=2;
						}
					}
					else{
						error(current->line,current->tok,2);
						ok=2;
					}
				}
				else{
					error(current->line,current->tok,5);
					ok=2;
				}
			}
			else{
				error(current->line,current->tok,14);
				ok=2;
			}
		}
		else{
			error(current->line,current->tok,15);
			ok=2;
		}
	}
	else{
		error(current->line,current->tok,3);
		ok=2;
	}

	if (ok == 2){
		while (strcmp(current->tok,";")!=0)
			current= current->next;
	}

	return current;
}

struct token *elsecheck (struct token *current){
	int ok=0;
	current=current->next;
	if(strcmp(current->tok,"{")==0){
		ok=1;
		aq++;
	}
	else{
		error(current->line,current->tok,1);
		ok=2;
	}

	if (ok == 2){
		while (strcmp(current->tok,";")!=0)
			current= current->next;
	}

	return current;
}

struct token *whilecheck (struct token *current){
	int ok=0;
	current=current->next;
	if(strcmp(current->tok,"(")==0){
		current=current->next;
		if(current->type==2){
			current=current->next;
			if(strcmp(current->tok,")")==0){
				current=current->next;
				if(strcmp(current->tok,"{")==0){
					ok=1;
					aq++;
				}
				else{
					error(current->line,current->tok,1);
					ok=2;
				}
			}
			else{
				error(current->line,current->tok,2);
				ok=2;
			}

		}
		else if(current->type==6){
			current=current->next;
			if(strcmp(current->tok,")")==0){
				current=current->next;
				if(strcmp(current->tok,"{")==0){
					aq++;
					ok=1;
				}
				else{
					error(current->line,current->tok,1);
					ok=2;
				}
			}
			else if(current->type==33){
				current=current->next;
				if(current->type==6 || current->type==2 || current->type==5 ){
					current=current->next;
					if(strcmp(current->tok,")")==0){
						current=current->next;
						if(strcmp(current->tok,"{")==0){
							aq++;
							ok=1;
						}
						else{
							error(current->line,current->tok,1);
							ok=2;
						}
					}
					else{
						error(current->line,current->tok,2);
						ok=2;
					}
				}
				else{
					error(current->line,current->tok,12);
					ok=2;
				}
			}
			else if(current->type==34){
				current=current->next;
				if(current->type==6){
					current=current->next;
					if(strcmp(current->tok,")")==0){
						current=current->next;
						if(strcmp(current->tok,"{")==0){
							aq++;
							ok=1;
						}
						else{
							error(current->line,current->tok,1);
							ok=2;
						}
					}
					else{
						error(current->line,current->tok,2);
						ok=2;
					}
				}
				else{
					error(current->line,current->tok,5);
					ok=2;
				}
			}
			else{
				error(current->line,current->tok,14);
				ok=2;
			}
		}
		else{
			error(current->line,current->tok,15);
			ok=2;
		}
	}
	else{
		error(current->line,current->tok,3);
		ok=2;
	}

	if (ok == 2){
		while (strcmp(current->tok,";")!=0)
			current= current->next;
	}

	return current;
}

void error(int line,char s[20],int errornumber)
{
	switch(errornumber){
		case 1 :
			printf("Error in %d token : Expected '{' But We See %s\n",line,s);
			break;
		case 2:
			printf("Error in %d token : Expected ')' But We See %s\n",line,s);
			break;
		case 3:
			printf("Error in %d token : Expected '(' But We See %s\n",line,s);
			break;
		case 4:
			printf("Error in %d token : Expected ';' But We See %s\n",line,s);
			break;
		case 5:
			printf("Error in %d token : Expected IDENTIFIER But We See %s\n",line,s);
			break;
		case 6:
			printf("Error in %d token : Expected IDENTIFIER or NUMBER But We See %s\n",line,s);
			break;
		case 7:
			printf("Error in %d token : Expected OPERATOR or ';' But We See %s\n",line,s);
			break;
		case 8:
			printf("Error in %d token : Expected '=' or ';' or ',' But We See %s\n",line,s);
			break;
		case 9:
			printf("Error in %d token: Expected IDENTIFIER or TRUE or FALSE But We See %s\n",line,s);
			break;
		case 10:
			printf("Error in %d token : Expected IDENTIFIER or CHARACTER But We See %s\n",line,s);
			break;
		case 11:
			printf("Error in %d token : Expected '=' But We See %s\n",line,s);
			break;
		case 12:
			printf("Error in %d token : Expected IDENTIFIER or CHARACTER or NUMBER But We See %s\n",line,s);
			break;
		case 13:
			printf("Error in %d token : Expected NUMBER But We See %s\n",line,s);
			break;
		case 14:
			printf("Error in %d token : Expected OPERATOR But We See %s\n",line,s);
			break;
		case 15:
			printf("Error in %d token : Expected CORRECT EXPRESSION But We See %s\n",line,s);
			break;
		case 16:
			printf("Error in last line : Expected '}' But We didn't See anything!!\n");
		case 17:
			printf("Error  : Expected '{' before '}' !!\n");
			break;
	}

	return;
}

